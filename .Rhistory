qplot(hwy, data=mpg, facets = drv~., binwidth=2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(data = mpg, aes(displ, hwy))
summary(g)
g+ geom_point()
g+ geom_point()+geom_smooth()
g+ geom_point()+geom_smooth(method = "lm")
g+ geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)
g+ geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+ geom_point(color="pink", size=4, alpha=.5)
g+ geom_point( size=4, alpha=.5, aes(color=drv))
g+ geom_point( aes(color=drv))+ labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+ geom_point( size=2, alpha=.5, aes(color=drv)) + geom_smooth(size=4, linetype=3, method = "lm")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(-3,3))
ggplot(data=testdat, aes(x=myx, y=myy))
g <- ggplot(data=testdat, aes(x=myx, y=myy))
g+ geom_line()
g+ geom_line() + ylim(-3,3)
g+ geom_line() + coord_cartesian(ylim=(-3,3))
g+ geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(data=testdat, aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(data=mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill="cut")
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom = "density")
qplot(price, data=diamonds, geom = "density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut
)
qplot(carat, price, data=diamonds, colors=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm") )
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method = "lm", size=3, color="pink")
ggplot(data=diamonds, aes(carat, price)) +geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.lmline
?lines
?axis
?points
?trellis.par.set
?splom
?par
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
?llines
require(swirl)
swirl()
dist(dataframe)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
5
12
abline(h=.05, col="green")
dist(dFsm)
plot(as.dendrogram(hc))
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(as.dendrogram(denmt))
plot(denmt)
distmt
dist(mtcars)
dist(mtcars[,dist])
dist(mtcars[,cyl])
dist(mtcars[,$cyl])
dist(mtcars[,1])
swirl()
cmat
points(cx,cy, col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist(x,y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
append(distTmp2, 2, which.min())
append(distTmp2, 2, which.min)
apply(distTmp2, 2, which.min)
points(x,y pch=19, cex=2, col=cols1[newClust2])
points(x,y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
require(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPAtt.R", local=TRUE)
source("addPatt.R", local=TRUE)
heatmap
heatmap(dataMatrix)
mat
svd(mat)
matu%*%t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd$v[,2]
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
svd1$u[,1:2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
dist(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(sdv1$u)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(cbind(sub1[,10:12],maxCon)
)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(561,562)], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
require(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
sum(x0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
dead(dates)
head(dates)
hist(dates[negative],"month")
str(site0)
str(site1)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.Id==2008)
str(cnt0)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
mfrow
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub. pch=20)
plot(dates0, x0sub, pch=20)
abline
abline(h=median(x0sub, na.rm = TRUE), lwd=2)
plot(dates1, x1sub, pch=20)
abline(h=median(x1sub, na.rm = TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state, mean=mn0)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0,d1, state)
mrg <- merge(d0,d1, by=state)
mrg <- merge(d0,d1, by="state")
dim(mrg)
head(mrg)
with(mgr, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("C:/Users/ratti/Projects/ReproducibleResearch/RepData_PeerAssessment1")
library(readr)
activity <- read_csv("C:/Users/ratti/Projects/ReproducibleResearch/RepData_PeerAssessment1/activity.zip")
View(activity)
library(readr)
activity <- read_csv("activity.zip")
View(activity)
activity <- read.csv("activity.zip")
View(activity)
activity <- read.table("activity.zip")
View(activity)
activity <- reaa_cvs("activity.zip")
library(readr)
activity <- read_cvs("activity.zip")
library(readr)
activity <- read_csv("activity.zip")
View(activity)
str(activity)
summary(activity)
means(activity$steps)
mean(activity$steps)
mean(activity$steps, na.rm = TRUE)
require(dplyr)
summarize(group_by(activity, date), steps=sum(steps))
activityDay -> summarize(group_by(activity, date), steps=sum(steps))
activityDay <- summarize(group_by(activity, date), steps=sum(steps))
activityDay
histogram(activityDay)
library("ggplot2", lib.loc="~/R/win-library/3.3")
hist(activityDay)
hist(activityDay$steps)
require(dplyr)
activityDay <- summarize(group_by(activity, date), steps=sum(steps, na.rm = TRUE))
activityDay
hist(activityDay$steps)
activityDayMM <- summarize(group_by(activity, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
activityDayMM
activityInterval <- summarize(group_by(activity, interval), steps=mean(steps, na.rm = TRUE))
activityInterval
plot (interval, steps, data=activityInterval)
with(activityInterval, plot (interval, steps, type="l")
)
with( activityDays, hist(steps))
with( activityDay, hist(steps))
with( activityDay, hist(steps, breaks = 10))
with( activityDay, hist(steps, breaks = 30))
with( activityDay, hist(steps, breaks = 10))
max(activityInterval$steps)
activityInterval[max(activityInterval$steps),1]
activityInterval[max(activityInterval$steps),]
summary(activityInterval, max(steps))
summarize(activityInterval, max(steps))
activityInterval[activityInterval$steps=max(activityInterval$steps),]
activityInterval[activityInterval$steps>=max(activityInterval$steps),]
activityInterval[activityInterval$steps==max(activityInterval$steps),]
activityInterval[activityInterval$steps==max(activityInterval$steps),1]
MaxSteps <- activityInterval[activityInterval$steps==max(activityInterval$steps),]
MaxSteps
is.na(activity$steps)
sum(is.na(activity$steps))
count(actiity)
count(activity)
count(activity$steps)
count(activity)
PercStepsNA <- stepsNA/count(activity)*100
stepsNA <- sum(is.na(activity$steps))
PercStepsNA <- stepsNA/count(activity)*100
stepsNA <- sum(is.na(activity$steps))
stepsNA
PercStepsNA <- stepsNA/count(activity)*100
PercStepsNA
sum(is.na(activity$date))
sum(is.na(activity$interval))
stepsNA <- is.na(activity$steps)
sum(stepsNA)
sum(is.na(activity$date))
sum(is.na(activity$interval))
PercStepsNA <- stepsNA/count(activity)*100
PercStepsNA
PercStepsNA <- sum(stepsNA)/count(activity)*100
PercStepsNA
activityInterval
activity[stepsNA,]
activity[stepsNA][activity$interval==5,]
activity[stepsNA && activity$interval==5,]
activity[stepsNA & activity$interval==5,]
actBCK[stepsNA & actBCK$interval==5, 1] <- activityInterval[activityInterval$interval==5, "steps"]
actBCK <- activity
actBCK[stepsNA & actBCK$interval==5, 1] <- activityInterval[activityInterval$interval==5, "steps"]
actBCK[stepsNA & actBCK$interval==5, ]
for (i in activityInterval$interval) actBCK[stepsNA & actBCK$interval==i, 1] <- activityInterval[activityInterval$interval==i, "steps"]
actBCK[stepsNA, ]
activity[stepsNA, ]
library(readr)
activity <- read_csv("activity.zip")
View(activity)
str(activity)
mean(activity$steps, na.rm = TRUE)
require(dplyr)
actDay <- summarize(group_by(activity, date), steps=sum(steps, na.rm = TRUE))
actDay
with( actDay, hist(steps, breaks = 10))
actDayMM <- summarize(group_by(activity, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actDayMM
actInt <- summarize(group_by(activity, interval), steps=mean(steps, na.rm = TRUE))
actInt
with(actInt, plot (interval, steps, type="l"))
with(actInt, plot (interval, steps, type="l", col="blue", lwd=3,main = "Average Steps by Interval accross all days"))
MaxSteps <- actInt[actInt$steps==max(actInt$steps),]
MaxSteps
stepsNA <- is.na(activity$steps)
sum(stepsNA)
sum(is.na(activity$date))
sum(is.na(activity$interval))
PercStepsNA <- sum(stepsNA)/count(activity)*100
PercStepsNA
mean(stepsNA)
actBCK <- activity
for (i in actInt$interval) actBCK[stepsNA & actBCK$interval==i, 1] <- actInt[actInt$interval==i, "steps"]
actBCK[stepsNA & actBCK$interval==5, ]
actBCK[stepsNA, ]
activity[stepsNA, ]
actFIL <- activity
for (i in actInt$interval) actFIL[stepsNA & actFIL$interval==i, 1] <- actInt[actInt$interval==i, "steps"]
actFIL[stepsNA & actFIL$interval==5, ]
actFIL[stepsNA, ]
activity[stepsNA, ]
actFilDay <- summarize(group_by(actFIL, date), steps=sum(steps, na.rm = TRUE))
actFilDay
with( actFilDay, hist(steps, breaks = 10))
actDayMM <- summarize(group_by(activity, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actDayMM
actFilDayMM <- summarize(group_by(actFIL, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actFilDayMM
weekdays(actFIL$date)
ifelse( weekdays(actFIL$date) in ("Saturday","Sunday"), "weekend","weekday")
ifelse( weekdays(actFIL$date) == ("Saturday","Sunday"), "weekend","weekday")
ifelse( weekdays(actFIL$date) =="Saturday" |weekdays(actFIL$date) =="Sunday"), "weekend","weekday")
ifelse( weekdays(actFIL$date) =="Saturday" | weekdays(actFIL$date) =="Sunday", "weekend","weekday")
dia <- ifelse( weekdays(actFIL$date) =="Saturday" | weekdays(actFIL$date) =="Sunday", "weekend","weekday")
structure(dia)
table(dia)
actFIL$dayType <- ifelse( weekdays(actFIL$date) =="Saturday" | weekdays(actFIL$date) =="Sunday", "weekend","weekday")
with( actFilDay, hist(steps, breaks = 10, main = "Histogram of Steps without NAs"))
actFilWInt <- summarize(group_by(actFIL, dayType, interval), steps=mean(steps))
actFilWInt
View(actFilWInt)
View(actFilWInt)
with(actFilWInt, plot(interval, steps))
with(actFilWInt, plot(interval, steps, type="l", color=dayType))
qplot(interval, steps, data = actFilWInt)
qplot(interval, steps, data = actFilWInt, facets = .~dayType)
qplot(interval, steps, data = actFilWInt, facets = .~dayType, geom = "line")
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line")
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line", color="blue")
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line")
require(lattice)
xyplot(interval~steps |dayType, data = actFilWInt)
xyplot(steps~interval |dayType, data = actFilWInt)
xyplot(steps~interval |dayType, data = actFilWInt, layout= c(1,2)
xyplot(steps~interval |dayType, data = actFilWInt, layout= c(1,2))
xyplot(steps~interval |dayType, data = actFilWInt, layout= c(2,1))
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(2,1))
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line")
require(lattice)
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(2,1))
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2))
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2), pch=8)
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2), type="l")
with(actFilWInt, plot(interval, steps, type="l", color=dayType))
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line")
require(lattice)
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2), type="l")
library(readr)
activity <- read_csv("activity.zip")
mean(activity$steps, na.rm = TRUE)
mean(activity$steps, na.rm = TRUE)
mean(activity$steps, na.rm = TRUE)
mean(activity$steps, na.rm = TRUE)
require(dplyr)
actDay <- summarize(group_by(activity, date), steps=sum(steps, na.rm = TRUE))
actDay
with( actDay, hist(steps, breaks = 10))
actDayMM <- summarize(group_by(activity, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actDayMM
actInt <- summarize(group_by(activity, interval), steps=mean(steps, na.rm = TRUE))
actInt
with(actInt, plot (interval, steps, type="l", col="blue", lwd=3,main = "Average Steps by Interval accross all days"))
MaxSteps <- actInt[actInt$steps==max(actInt$steps),]
MaxSteps
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2), type="l", main="Titulo")
activity <- read_csv("activity.zip")
View(activity)
str(activity)
mean(activity$steps, na.rm = TRUE)
require(dplyr)
actDay <- summarize(group_by(activity, date), steps=sum(steps, na.rm = TRUE))
actDay
with( actDay, hist(steps, breaks = 10))
actDayMM <- summarize(group_by(activity, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actDayMM
actInt <- summarize(group_by(activity, interval), steps=mean(steps, na.rm = TRUE))
actInt
with(actInt, plot (interval, steps, type="l", col="blue", lwd=3,main = "Average Steps by Interval accross all days"))
MaxSteps <- actInt[actInt$steps==max(actInt$steps),]
MaxSteps
stepsNA <- is.na(activity$steps)
sum(stepsNA)
sum(is.na(activity$date))
sum(is.na(activity$interval))
PercStepsNA <- sum(stepsNA)/count(activity)*100
PercStepsNA
mean(stepsNA)
actFIL <- activity
for (i in actInt$interval) actFIL[stepsNA & actFIL$interval==i, 1] <- actInt[actInt$interval==i, "steps"]
actFIL[stepsNA & actFIL$interval==5, ]
actFIL[stepsNA, ]
activity[stepsNA, ]
actFilDay <- summarize(group_by(actFIL, date), steps=sum(steps, na.rm = TRUE))
actFilDay
with( actFilDay, hist(steps, breaks = 10, main = "Histogram of Steps without NAs"))
actFilDayMM <- summarize(group_by(actFIL, date), stepsMean=mean(steps, na.rm = TRUE), stepsMedian=median(steps, na.rm = TRUE))
actFilDayMM
actFIL$dayType <- ifelse( weekdays(actFIL$date) =="Saturday" | weekdays(actFIL$date) =="Sunday", "weekend","weekday")
actFilWInt <- summarize(group_by(actFIL, dayType, interval), steps=mean(steps))
actFilWInt
qplot(interval, steps, data = actFilWInt, facets = dayType~., geom = "line")
require(lattice)
xyplot(steps~interval |dayType, data = actFilWInt, layout=c(1,2), type="l", main="Titulo")
View(actInt)
View(actInt)
